name: Daily Release for Milestone

on:
  # Disable automatic release creation temporarily for evaluation the new workflow
  # schedule:
  #   - cron: '0 9 * * *' # Runs daily at 5 PM Taipei time
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all tags and commits
          fetch-tags: true

      - name: Get Latest Tag
        id: latest_tag
        run: |
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "Latest tag: $latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      - name: Get Last Release Tag and Check Milestone
        uses: actions/github-script@v7
        id: init
        with:
          github-token: ${{secrets.TEST_GH_PAT}}
          script: |
            // Get last release tag
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            });
            const lastReleaseTag = releases.data[0]?.tag_name;
            core.exportVariable('last_release_tag', lastReleaseTag || '');
            console.log('Last release tag:', lastReleaseTag);

            // Get milestone with earliest due date
            const query = `query {
              repository(owner: "${context.repo.owner}", name: "${context.repo.repo}") {
                milestones(states: OPEN, first: 1, orderBy: {field: DUE_DATE, direction: ASC}) {
                  nodes {
                    title
                    dueOn
                    number
                  }
                }
              }
            }`;

            const result = await github.graphql(query);
            const milestone = result.repository.milestones.nodes[0];

            if (!milestone || !milestone.dueOn) {
              core.exportVariable('should_skip', 'true');
              return;
            }

            const milestoneDate = new Date(milestone.dueOn);
            const today = new Date();
            
            // Compare dates (ignoring time)
            const isSameDay = milestoneDate.getUTCFullYear() === today.getUTCFullYear() &&
                            milestoneDate.getUTCMonth() === today.getUTCMonth() &&
                            milestoneDate.getUTCDate() === today.getUTCDate();

            if (!isSameDay) {
              core.exportVariable('should_skip', 'true');
              return;
            }

            core.exportVariable('milestone_title', milestone.title);
            core.exportVariable('milestone_number', milestone.number);
            core.exportVariable('should_skip', 'false');

      - name: Create Release
        if: env.should_skip == 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.TEST_GH_PAT}}
          script: |
            const releaseNoteOptions = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: process.env.latest_tag,
            }
            if (process.env.last_release_tag) {
              releaseNoteOptions.previous_tag_name = process.env.last_release_tag;
            }
            const releaseNote = await github.rest.repos.generateReleaseNotes(releaseNoteOptions);
          
            const releaseOptions = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: process.env.latest_tag,
              body: releaseNote,
              make_latest: true,
            };

            const release = await github.rest.repos.createRelease(releaseOptions);
            core.exportVariable('release_url', release.data.html_url);

      - name: Update Milestone Description
        if: env.should_skip == 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.TEST_GH_PAT}}
          script: |
            // Get current milestone description
            const { data: milestone } = await github.rest.issues.getMilestone({
              owner: context.repo.owner,
              repo: context.repo.repo,
              milestone_number: parseInt(process.env.milestone_number)
            });

            // Update milestone description with release link
            const updatedDescription = `${milestone.description || ''}\n\nRelease: ${process.env.release_url}`;
            
            await github.rest.issues.updateMilestone({
              owner: context.repo.owner,
              repo: context.repo.repo,
              milestone_number: parseInt(process.env.milestone_number),
              description: updatedDescription
            });

      - name: Close Milestone
        if: env.should_skip == 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.TEST_GH_PAT}}
          script: |
            await github.rest.issues.updateMilestone({
              owner: context.repo.owner,
              repo: context.repo.repo,
              milestone_number: parseInt(process.env.milestone_number),
              state: 'closed'
            });

      - name: Trigger release-production.yml
        if: env.should_skip == 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.TEST_GH_PAT}}
          script: |
            const workflowFileName = "release-production.yml";
            const ref = "main";
            
            const workflows = await github.rest.actions.listRepoWorkflows({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const workflow = workflows.data.workflows.find(w => w.path.endsWith(workflowFileName));

            if (!workflow) {
              throw new Error(`Workflow file '${workflowFileName}' not found in the repository.`);
            }

            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: workflow.id,
              ref: ref,
            });

            console.log(`Successfully triggered workflow '${workflowFileName}' on branch '${ref}'.`);
