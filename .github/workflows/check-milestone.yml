name: Enforce Earliest Milestone Assignment

on:
  pull_request:
    branches: [ "main" ]
    types: [assigned, opened, synchronize, reopened, milestoned, demilestoned]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Optional PR Number to Check'
        required: false
        type: string

jobs:
  enforce-milestone:
    permissions:
      pull-requests: read
      statuses: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const { owner, repo } = context.repo;
            
            // Determine PR number - either from context or workflow dispatch input
            const prNumber = context.payload.inputs?.pr_number || 
                            context.payload.pull_request?.number;

            if (!prNumber) {
              core.setFailed('No pull request number found');
              return;
            }

            // Fetch the specific PR details
            const { data: pr } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: prNumber
            });

            const currentMilestone = pr.milestone;

            // Create a base status context
            const statusContext = 'Milestone Enforcement';
            
            // If no milestone is assigned, set failure status
            if (!currentMilestone) {
              // await github.rest.repos.createCommitStatus({
              //   owner,
              //   repo,
              //   sha: pr.head.sha,
              //   state: 'failure',
              //   context: statusContext,
              //   description: 'Pull Request must be assigned to a milestone',
              //   target_url: `https://github.com/${owner}/${repo}/pull/${prNumber}`
              // });
              core.setFailed('Pull Request must be assigned to a milestone.');
              return;
            }

            // Fetch all milestones for the repository
            const milestones = await github.rest.issues.listMilestones({
              owner,
              repo,
              state: 'open'
            });

            // Find the milestone with the earliest due date
            const earliestMilestone = milestones.data.reduce((earliest, current) => {
              if (!earliest.due_on) return current;
              if (!current.due_on) return earliest;
              
              return new Date(earliest.due_on) <= new Date(current.due_on) 
                ? earliest 
                : current;
            });

            // Prepare status details
            let statusState = 'success';
            let statusDescription = `Assigned to earliest milestone: ${currentMilestone.title}`;

            // Check if the current milestone is the earliest
            if (earliestMilestone.number !== currentMilestone.number) {
              statusState = 'failure';
              statusDescription = `Must be assigned to earliest milestone: ${earliestMilestone.title} (currently assigned to ${currentMilestone.title})`;
            }

            // Set commit status
            // await github.rest.repos.createCommitStatus({
            //   owner,
            //   repo,
            //   sha: pr.head.sha,
            //   state: statusState,
            //   context: statusContext,
            //   description: statusDescription,
            //   target_url: `https://github.com/${owner}/${repo}/pull/${prNumber}`
            // });

            // If it's a failure, also set the action to fail
            if (statusState === 'failure') {
              core.setFailed(statusDescription);
            }
